package com.atbm.quanlybenhvien.views.Doctor;

import java.awt.BorderLayout;
import java.awt.FlowLayout;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import com.atbm.quanlybenhvien.entity.User;
import com.atbm.quanlybenhvien.util.ConnectionControl;

import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.swing.SwingConstants;
import javax.swing.JTextField;
import javax.swing.JComboBox;

public class DoctorAddServices extends JDialog {

	private static final long serialVersionUID = 1L;
	private final JPanel contentPanel = new JPanel();
	private User user;
	private JTextField txtMaKB;
	private JTextField txtMoTa;

	private DefaultComboBoxModel<String> comboModelDichVu;

	public DefaultComboBoxModel<String> getComboModelDichVu() {
		return comboModelDichVu;
	}

	public void setComboModelDichVu(DefaultComboBoxModel<String> comboModelDichVu) {
		this.comboModelDichVu = comboModelDichVu;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public static void main(String[] args) {
		try {
			DoctorAddServices dialog = new DoctorAddServices(new User(), new String());
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public DoctorAddServices(final User user, String maKB) {
		this.user = user;

		setBounds(100, 100, 320, 200);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		contentPanel.setLayout(null);
		{
			JLabel lblMaKB = new JLabel("Mã Khám Bệnh:");
			lblMaKB.setHorizontalAlignment(SwingConstants.LEFT);
			lblMaKB.setFont(new Font("Times New Roman", Font.BOLD, 12));
			lblMaKB.setBounds(10, 11, 100, 14);
			contentPanel.add(lblMaKB);
		}

		txtMaKB = new JTextField();
		txtMaKB.setBounds(120, 8, 86, 20);
		contentPanel.add(txtMaKB);
		txtMaKB.setColumns(10);
		txtMaKB.setText(maKB);
		txtMaKB.setEditable(false);

		{
			JLabel lblMaDV = new JLabel("Mã Dịch Vụ:");
			lblMaDV.setHorizontalAlignment(SwingConstants.LEFT);
			lblMaDV.setFont(new Font("Times New Roman", Font.BOLD, 12));
			lblMaDV.setBounds(10, 39, 100, 14);
			contentPanel.add(lblMaDV);
		}
		{
			JLabel lblMT = new JLabel("Mô Tả:");
			lblMT.setHorizontalAlignment(SwingConstants.LEFT);
			lblMT.setFont(new Font("Times New Roman", Font.BOLD, 12));
			lblMT.setBounds(10, 70, 100, 14);
			contentPanel.add(lblMT);
		}
		{
			txtMoTa = new JTextField();
			txtMoTa.setEditable(false);
			txtMoTa.setColumns(10);
			txtMoTa.setBounds(120, 67, 86, 20);
			contentPanel.add(txtMoTa);
		}

		draw_ComboBoxTableDichVu();
		JComboBox<String> comboBox = new JComboBox<String>(comboModelDichVu);
		comboBox.setBounds(120, 36, 86, 20);
		contentPanel.add(comboBox);

		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				JButton okButton = new JButton("Thêm");
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				JButton cancelButton = new JButton("Hủy");
				buttonPane.add(cancelButton);
			}
		}
	}

	private void draw_ComboBoxTableDichVu() {
		comboModelDichVu = new DefaultComboBoxModel<String>();
		try {
			Connection conn = new ConnectionControl().createConnection(user.getUserName(), user.getPassword());
			// Lấy tất cả các bảng thuộc quyền sở hữu của dba
			String sql = "SELECT * FROM QLBV.DICHVU";
			PreparedStatement statement = conn.prepareStatement(sql);
			ResultSet res = statement.executeQuery();
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có dịch vụ nào!");
			} else {
				do {
					comboModelDichVu.addElement(res.getString("MADV").toString());
				} while (res.next());
			}

			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
