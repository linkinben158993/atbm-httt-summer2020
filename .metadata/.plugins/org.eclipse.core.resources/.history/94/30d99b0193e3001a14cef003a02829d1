package com.atbm.quanlybenhvien.views.Busary;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import com.atbm.quanlybenhvien.entity.User;
import com.atbm.quanlybenhvien.util.ConnectionControl;
import com.atbm.quanlybenhvien.views.GenericStuff;
import com.atbm.quanlybenhvien.views.Login;
import com.atbm.quanlybenhvien.views.Accountant.AccountantDashBoard;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.ScrollPaneConstants;

public class BusaryPatientsStats extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;

	private DefaultTableModel tablePatients;

	public DefaultTableModel getTablePatients() {
		return tablePatients;
	}

	public void setTablePatients(DefaultTableModel tablePatients) {
		this.tablePatients = tablePatients;
	}

	private DefaultTableModel tablePatients_Service;

	public DefaultTableModel getTablePatients_Service() {
		return tablePatients_Service;
	}

	public void setTablePatients_Service(DefaultTableModel tablePatients_Service) {
		this.tablePatients_Service = tablePatients_Service;
	}

	private User user;

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	private GenericStuff genericStuff = new GenericStuff();
	private JTable tbl_PatientsService;
	private JTable tbl_Patients;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					BusaryPatientsStats frame = new BusaryPatientsStats(new User());
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public BusaryPatientsStats(final User user) {
		this.user = user;

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 800, 415);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JScrollPane scrollPane_Patients = new JScrollPane();
		scrollPane_Patients.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane_Patients.setBounds(10, 11, 650, 156);
		contentPane.add(scrollPane_Patients);
		draw_TablePatients();
		tbl_Patients = new JTable(tablePatients);
		tbl_Patients.setAutoCreateRowSorter(true);
		genericStuff.resizeTable(tbl_Patients);
		scrollPane_Patients.setViewportView(tbl_Patients);

		final JScrollPane scrollPane_PatientsService = new JScrollPane();
		scrollPane_PatientsService.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane_PatientsService.setBounds(10, 178, 650, 172);
		contentPane.add(scrollPane_PatientsService);
		JButton btnLookUp = new JButton("<html><center>Tra Cứu<br>Dịch Vụ</center></html>");
		btnLookUp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (tbl_Patients.getSelectedRow() == -1) {
					JOptionPane.showMessageDialog(null, "Vui lòng chọn bảng khám bệnh để tra cứu!");
				} else {
					String maKB = tbl_Patients.getValueAt(tbl_Patients.getSelectedRow(), 1).toString();
					draw_TablePatientsService(maKB);
					tbl_PatientsService = new JTable(tablePatients_Service);
					tbl_PatientsService.setAutoCreateRowSorter(true);
					tbl_PatientsService.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
					genericStuff.resizeTable(tbl_PatientsService);
					scrollPane_PatientsService.setViewportView(tbl_PatientsService);
				}
			}
		});
		btnLookUp.setFont(new Font("Times New Roman", Font.PLAIN, 12));
		btnLookUp.setBounds(670, 11, 104, 42);
		contentPane.add(btnLookUp);

		JButton btnUpdateChosen = new JButton("<html><center>Cập Nhật<br>Đã Chọn</center></html>");
		btnUpdateChosen.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (tbl_Patients.getSelectedRow() == -1) {
					JOptionPane.showMessageDialog(null, "Vui lòng chọn bảng khám bệnh để cập nhật thông tin!");
				} else {
					boolean pass = pass_TinhChiPhi(tbl_Patients.getSelectedRows());
					if (pass) {
						System.out.println(tbl_Patients.getValueAt(tbl_Patients.getSelectedRow(), 1).toString());
						Connection conn = new ConnectionControl().createConnection(user.getUserName(),
								user.getPassword());
						PreparedStatement stmt = null;
						try {
							stmt = conn.prepareStatement("UPDATE QLBV.KHAMBENH SET CHIPHI =\r\n" + "(\r\n"
									+ "SELECT\r\n" + "(\r\n" + "    SELECT SUM(DVU.GIA) CHIPHI FROM\r\n"
									+ "    QLBV.DIEUPHOIDICHVU DPDV\r\n"
									+ "    JOIN QLBV.DICHVU DVU ON DPDV.MADV = DVU.MADV\r\n"
									+ "    WHERE DPDV.MAKB = KB.MAKB\r\n" + ") CHIPHI\r\n" + "FROM QLBV.KHAMBENH KB\r\n"
									+ "WHERE KB.MAKB = ?\r\n" + ")\r\n" + "WHERE MAKB = ?");
						} catch (SQLException e1) {
							e1.printStackTrace();
						}
						for (int item : tbl_Patients.getSelectedRows()) {
							try {
								stmt.setString(1, tbl_Patients.getValueAt(item, 1).toString());
								stmt.setString(2, tbl_Patients.getValueAt(item, 1).toString());
							} catch (SQLException e1) {
								e1.printStackTrace();
							}
						}
						try {
							stmt.executeBatch();
						} catch (Exception e2) {
							e2.printStackTrace();
							JOptionPane.showMessageDialog(null, "Cập nhật thông tin khám bệnh thất bại!");
						}

						JOptionPane.showMessageDialog(null, "Cập nhật thông tin khám bệnh thành công!");
						getTablePatients().fireTableDataChanged();
						draw_TablePatients();
						tbl_Patients.setModel(getTablePatients());
						genericStuff.resizeTable(tbl_Patients);
						genericStuff.call_revapaint(tbl_Patients);

					} else {
						JOptionPane.showMessageDialog(null, "Vui lòng chỉ chọn những khám bệnh chưa được tính!");
					}
				}
			}
		});
		btnUpdateChosen.setFont(new Font("Times New Roman", Font.PLAIN, 12));
		btnUpdateChosen.setBounds(670, 64, 104, 42);
		contentPane.add(btnUpdateChosen);

		JButton btnUpdateAll = new JButton("<html><center>Cập Nhật<br>Tất Cả</center></html>");
		btnUpdateAll.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for (int i = 0; i < tbl_Patients.getRowCount(); i++) {
					System.out.println(tbl_Patients.getValueAt(i, 1).toString());
				}
			}
		});
		btnUpdateAll.setFont(new Font("Times New Roman", Font.PLAIN, 12));
		btnUpdateAll.setBounds(670, 117, 104, 42);
		contentPane.add(btnUpdateAll);

		JPanel panelBack = new JPanel();
		panelBack.setLayout(null);
		panelBack.setBackground(Color.LIGHT_GRAY);
		panelBack.setBounds(674, 265, 100, 110);
		contentPane.add(panelBack);
		JLabel lblBack = new JLabel("Quay Lại", SwingConstants.CENTER);
		lblBack.setForeground(Color.BLACK);
		lblBack.setFont(new Font("Times New Roman", Font.BOLD, 14));
		lblBack.setBounds(0, 86, 100, 14);
		JLabel lblIconBack = new JLabel();
		lblIconBack.setBounds(10, 11, 80, 80);
		panelBack.add(lblIconBack);
		ImageIcon imageIcon_Back = new ImageIcon(AccountantDashBoard.class.getResource("/images/Back.png"));
		Image image_Back = imageIcon_Back.getImage();
		Image newImage_Back = image_Back.getScaledInstance(70, 70, java.awt.Image.SCALE_SMOOTH);
		lblIconBack.setIcon(new ImageIcon(newImage_Back));
		lblIconBack.setBounds(10, 11, 80, 80);
		lblIconBack.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				dispose();
				BusaryDashBoard busaryDashBoard = new BusaryDashBoard(user);
				genericStuff.call_frame(login);
			}
		});
		genericStuff.hover(lblIconBack, lblBack, panelBack, new Color(230, 230, 250), Color.DARK_GRAY, Color.BLACK,
				Color.LIGHT_GRAY);
		panelBack.add(lblBack);

		JLabel label_13 = new JLabel("2020 Nhóm 23 - Demo Quản Lý Bệnh Viện");
		label_13.setHorizontalAlignment(SwingConstants.CENTER);
		label_13.setFont(new Font("Tahoma", Font.BOLD, 12));
		label_13.setBounds(145, 361, 330, 14);
		contentPane.add(label_13);
	}

	private boolean pass_TinhChiPhi(int[] selected_rows) {
		for (int i : selected_rows) {
			if (!tbl_Patients.getValueAt(i, 6).toString().equals("Chưa Tính")) {
				JOptionPane.showMessageDialog(null, "Chỉ được tính toán trên những Toa Thuốc chưa được tính chi phí");
				return false;
			}
		}
		return true;
	}

	@SuppressWarnings("serial")
	public void draw_TablePatients() {
		try {

			Connection conn = new ConnectionControl().createConnection(this.user.getUserName(),
					this.user.getPassword());
			String sql = "SELECT * FROM QLBV.KHAMBENH JOIN QLBV.BENHNHAN ON KHAMBENH.BENHNHAN = BENHNHAN.MABN ORDER BY MAKB";
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			ResultSet res = preparedStatement.executeQuery();
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có dữ liệu trong lương!");

			} else {
				String[] columns = { "STT", "Mã KB", "Bệnh Nhân", "Họ Tên", "Thời Gian", "Phòng", "Chi Phí" };
				tablePatients = new DefaultTableModel(columns, 0) {
					@Override
					public boolean isCellEditable(int row, int column) {
						return false;
					}
				};
				int i = 1;
				do {
					String[] data = { String.valueOf(i++), res.getString("MAKB"), res.getString("BENHNHAN"),
							res.getString("HOTEN"), res.getString("THOIGIAN"), res.getString("PHONG"),
							res.getString("CHIPHI") != null ? res.getString("CHIPHI") : "Chưa Tính" };
					tablePatients.addRow(data);
				} while (res.next());

				conn.close();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("serial")
	public void draw_TablePatientsService(String maKB) {
		try {

			Connection conn = new ConnectionControl().createConnection(this.user.getUserName(),
					this.user.getPassword());
			String sql = "SELECT DIEUPHOIDICHVU.MAKB, KHAMBENH.BENHNHAN, BENHNHAN.HOTEN, KHAMBENH.BACSI, DIEUPHOIDICHVU.MADV, DICHVU.TEN, DIEUPHOIDICHVU.MOTA, DICHVU.GIA\r\n"
					+ "FROM QLBV.DIEUPHOIDICHVU, QLBV.BENHNHAN, QLBV.KHAMBENH, QLBV.DICHVU\r\n"
					+ "WHERE BENHNHAN.MABN = KHAMBENH.BENHNHAN AND KHAMBENH.MAKB = DIEUPHOIDICHVU.MAKB AND DIEUPHOIDICHVU.MADV = DICHVU.MADV\r\n"
					+ "AND DIEUPHOIDICHVU.MAKB = '" + maKB + "'";
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			ResultSet res = preparedStatement.executeQuery();
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có dữ liệu trong lương!");

			} else {
				String[] columns = { "STT", "Mã KB", "Bệnh Nhân", "Họ Tên", "Bác Sĩ", "Mã Dịch Vụ", "Tên Dịch Vụ",
						"Giá" };
				tablePatients_Service = new DefaultTableModel(columns, 0) {
					@Override
					public boolean isCellEditable(int row, int column) {
						return false;
					}
				};
				int i = 1;
				do {
					String[] data = { String.valueOf(i++), res.getString("MAKB"), res.getString("BENHNHAN"),
							res.getString("HOTEN"), res.getString("BACSI"), res.getString("MADV"), res.getString("TEN"),
							res.getString("GIA") };
					tablePatients_Service.addRow(data);
				} while (res.next());

				conn.close();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
