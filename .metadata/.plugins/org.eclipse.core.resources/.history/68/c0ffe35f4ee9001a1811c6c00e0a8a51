package com.atbm.quanlybenhvien.views.Specialist;

import java.awt.EventQueue;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import com.atbm.quanlybenhvien.entity.User;
import com.atbm.quanlybenhvien.util.ConnectionControl;
import com.atbm.quanlybenhvien.views.GenericStuff;

public class SpecialistService extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private SpecialistService currFrame;

	public SpecialistService getCurrFrame() {
		return currFrame;
	}

	public void setCurrFrame(SpecialistService currFrame) {
		this.currFrame = currFrame;
	}

	private GenericStuff genericStuff = new GenericStuff();

	private DefaultTableModel tablePatients;

	public DefaultTableModel getTablePatients() {
		return tablePatients;
	}

	public void setTablePatients(DefaultTableModel tablePatients) {
		this.tablePatients = tablePatients;
	}

	private JTable tbl_Patients;

	public JTable getTbl_Patients() {
		return tbl_Patients;
	}

	public void setTbl_Patients(JTable tbl_Patients) {
		this.tbl_Patients = tbl_Patients;
	}

	private User user;

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					SpecialistService frame = new SpecialistService(new User());
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public SpecialistService(final User user) {
		this.user = user;

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 600, 440);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		this.currFrame = (SpecialistService) SwingUtilities.getWindowAncestor(contentPane);

		JScrollPane scrollPane_Patients = new JScrollPane();
		scrollPane_Patients.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane_Patients.setBounds(10, 11, 550, 334);
		contentPane.add(scrollPane_Patients);
		draw_TableKhamBenh();
		tbl_Patients = new JTable(tablePatients);
		tbl_Patients.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		genericStuff.resizeTable(tbl_Patients);
		scrollPane_Patients.setViewportView(tbl_Patients);
	}

	@SuppressWarnings("serial")
	public void draw_TableKhamBenh() {
		try {

			Connection conn = new ConnectionControl().createConnection(this.user.getUserName(),
					this.user.getPassword());
			String sql = "SELECT * FROM QLBV.DIEUPHOIDICHVU DPDV JOIN QLBV.KHAMBENH KB ON DPDV.MAKB = KB.MAKB ORDER BY DPDV.MAKB";
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			ResultSet res = preparedStatement.executeQuery();
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có dữ liệu trong lương!");

			} else {
				String[] columns = { "STT", "Mã KB", "Mã BN", "Mã DV", "Thời Gian", "Mã Bác Sĩ", "Mô Tả" };
				tablePatients = new DefaultTableModel(columns, 0) {
					@Override
					public boolean isCellEditable(int row, int column) {
						return false;
					}
				};
				int i = 1;
				do {
					Timestamp ts = Timestamp.valueOf(res.getString("THOIGIAN"));
					LocalDateTime lcdt = ts.toLocalDateTime();

					String[] data = { String.valueOf(i++), res.getString("MAKB"), res.getString("BENHNHAN"),
							res.getString("MADV"), dateTimeFormatter.format(lcdt).toString(), res.getString("BACSI"),
							res.getString("MOTA") };
					tablePatients.addRow(data);
				} while (res.next());

				conn.close();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
