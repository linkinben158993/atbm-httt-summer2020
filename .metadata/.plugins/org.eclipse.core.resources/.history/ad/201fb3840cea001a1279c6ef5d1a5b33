package com.atbm.quanlybenhvien.views.DBA;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import com.atbm.quanlybenhvien.entity.User;
import com.atbm.quanlybenhvien.util.ConnectionControl;
import com.atbm.quanlybenhvien.views.GenericStuff;
import com.atbm.quanlybenhvien.views.Seller.SellerDashBoard;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JComboBox;

public class DBAAuditing extends JFrame {

	private static final long serialVersionUID = 1L;

	private JPanel contentPane;

	private GenericStuff genericStuff = new GenericStuff();

	private User user;

	private JTable tbl_AuditPol;

	private DefaultTableModel tableAudit;

	public DefaultTableModel getTableAudit() {
		return tableAudit;
	}

	public void setTableAudit(DefaultTableModel tableAudit) {
		this.tableAudit = tableAudit;
	}

	private JComboBox<String> comboBox_Tables;
	private JComboBox<String> comboBox_User;

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					DBAAuditing frame = new DBAAuditing(new User());
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public DBAAuditing(final User user) {
		this.user = user;

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 680, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JPanel panelBack = new JPanel();
		panelBack.setLayout(null);
		panelBack.setBackground(Color.LIGHT_GRAY);
		panelBack.setBounds(564, 251, 100, 110);
		contentPane.add(panelBack);
		JLabel lblBack = new JLabel("Quay Lại", SwingConstants.CENTER);
		lblBack.setForeground(Color.BLACK);
		lblBack.setFont(new Font("Times New Roman", Font.BOLD, 14));
		lblBack.setBounds(0, 86, 100, 14);
		JLabel lblIconBack = new JLabel();
		lblIconBack.setBounds(10, 11, 80, 80);
		panelBack.add(lblIconBack);
		ImageIcon imageIcon_Back = new ImageIcon(SellerDashBoard.class.getResource("/images/Back.png"));
		Image image_Back = imageIcon_Back.getImage();
		Image newImage_Back = image_Back.getScaledInstance(70, 70, java.awt.Image.SCALE_SMOOTH);
		lblIconBack.setIcon(new ImageIcon(newImage_Back));
		lblIconBack.setBounds(10, 11, 80, 80);
		lblIconBack.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				dispose();
				DBADashBoard dbaDashBoard = new DBADashBoard(user);
				genericStuff.call_frame(dbaDashBoard);
			}
		});
		genericStuff.hover(lblIconBack, lblBack, panelBack, new Color(230, 230, 250), Color.DARK_GRAY, Color.BLACK,
				Color.LIGHT_GRAY);
		panelBack.add(lblBack);

		JLabel label_13 = new JLabel("2020 Nhóm 23 - Demo Quản Lý Bệnh Viện");
		label_13.setHorizontalAlignment(SwingConstants.CENTER);
		label_13.setFont(new Font("Tahoma", Font.BOLD, 12));
		label_13.setBounds(10, 347, 500, 14);
		contentPane.add(label_13);

		JScrollPane scrollPane_AuditPol = new JScrollPane();
		scrollPane_AuditPol.setBounds(10, 11, 500, 325);
		contentPane.add(scrollPane_AuditPol);

		draw_AuditLog();
		tbl_AuditPol = new JTable(tableAudit);
		tbl_AuditPol.setAutoCreateRowSorter(true);
		genericStuff.resizeTable(tbl_AuditPol);
		scrollPane_AuditPol.setViewportView(tbl_AuditPol);

		JButton btnAddPol = new JButton("Thêm Chính Sách");
		btnAddPol.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

			}
		});
		btnAddPol.setBounds(520, 11, 130, 23);
		contentPane.add(btnAddPol);

		JButton btnDeletePol = new JButton("Xóa Chính Sách");
		btnDeletePol.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

			}
		});
		btnDeletePol.setBounds(520, 45, 130, 23);
		contentPane.add(btnDeletePol);

		JLabel lblFilter_Schema = new JLabel("Người Dùng:");
		lblFilter_Schema.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblFilter_Schema.setBounds(520, 139, 120, 14);
		contentPane.add(lblFilter_Schema);

		comboBox_User = new JComboBox<String>();
		comboBox_User.setMaximumRowCount(5);
		comboBox_User.setBounds(520, 164, 120, 20);
		try {
			Connection conn = new ConnectionControl().createConnection(user.getUserName(), user.getPassword());
			PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ALL_USERS\r\n" + "WHERE\r\n"
					+ "USERNAME LIKE '%BS%' AND USERNAME NOT LIKE '%DBS%'\r\n" + "OR\r\n" + "USERNAME LIKE '%NV%'\r\n"
					+ "OR\r\n" + "USERNAME LIKE '%QL%'\r\n" + "ORDER BY USERNAME");
			ResultSet res = stmt.executeQuery();
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có người dùng trong hệ thống!");

			} else {
				do {
					comboBox_User.addItem(res.getString("USERNAME"));
				} while (res.next());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		comboBox_User.setSelectedItem(null);
		contentPane.add(comboBox_User);
		comboBox_User.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				System.out.println("Bộ lọc theo người dùng được chạy");
				int count = 0;
				if (comboBox_Tables.getSelectedItem() == null && count > 0) {
					JOptionPane.showMessageDialog(null, "Vui lòng chọn đủ các trường để lọc!");
				} else {
					count++;
				}
			}
		});

		JLabel lbliTng = new JLabel("Đối Tượng:");
		lbliTng.setFont(new Font("Tahoma", Font.BOLD, 12));
		lbliTng.setBounds(520, 195, 120, 14);
		contentPane.add(lbliTng);

		comboBox_Tables = new JComboBox<String>();
		comboBox_Tables.setBounds(520, 220, 120, 20);
		try {
			Connection conn = new ConnectionControl().createConnection(user.getUserName(), user.getPassword());
			PreparedStatement stmt = conn
					.prepareStatement("SELECT * FROM DBA_TABLES WHERE OWNER = ? ORDER BY TABLE_NAME");
			stmt.setString(1, user.getUserName());
			ResultSet res = stmt.executeQuery();
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có bảng nào trong CSDL!");

			} else {
				do {
					comboBox_Tables.addItem(res.getString("TABLE_NAME"));
				} while (res.next());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		comboBox_Tables.setSelectedItem(null);
		contentPane.add(comboBox_Tables);

		JButton btnDetail = new JButton("Chi Tiết");
		btnDetail.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (tbl_AuditPol.getSelectedRow() == -1) {
					JOptionPane.showMessageDialog(null, "Vui lòng chọn mục trên bảng để xem chi tiết!");
				} else {
					DBAAuditSQLDetails dbaAuditSQLDetails = new DBAAuditSQLDetails(user,
							tbl_AuditPol.getValueAt(tbl_AuditPol.getSelectedRow(), 1).toString(),
							tbl_AuditPol.getValueAt(tbl_AuditPol.getSelectedRow(), 2).toString(), "QLBV");
					genericStuff.call_dialog(dbaAuditSQLDetails);
				}
			}
		});
		btnDetail.setBounds(520, 79, 130, 23);
		contentPane.add(btnDetail);
		comboBox_Tables.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.out.println("Bộ lọc theo bảng được chạy");
				int count = 0;
				if (comboBox_User.getSelectedItem() == null) {
					JOptionPane.showMessageDialog(null, "Vui lòng chọn đủ các trường để lọc!");
				} else {
					count++;

				}
			}
		});
	}

	@SuppressWarnings("serial")
	private void draw_AuditLogFiltered(String userName) {
		try {
			Connection conn = new ConnectionControl().createConnection(user.getUserName(), user.getPassword());
			// Lấy tất cả các quyền mà các tài khoản được quyền thực hiện trên các đối tượng
			// bảng
			String sql = "SELECT SESSIONID, DBUSERNAME, ACTION_NAME, SQL_TEXT, OBJECT_SCHEMA, OBJECT_NAME, EVENT_TIMESTAMP\r\n"
					+ "FROM UNIFIED_AUDIT_TRAIL\r\n" + "WHERE OBJECT_SCHEMA = 'QLBV' AND DBUSERNAME = ?";
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userName);
			ResultSet res = statement.executeQuery();
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có quyền nào được cấp trên cột!");
			} else {
				String[] columns = { "STT", "ID", "Tên Người Dùng", "Hoạt Động", "Đối Tượng", "Thời Gian" };
				DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

				tableAudit = new DefaultTableModel(columns, 0) {
					@Override
					public boolean isCellEditable(int row, int column) {
						return false;
					}
				};
				int i = 1;
				do {
					Timestamp ts = res.getTimestamp("EVENT_TIMESTAMP");
					LocalDateTime lcdt = ts.toLocalDateTime();

					String[] data = { String.valueOf(i++), res.getString("SESSIONID"), res.getString("DBUSERNAME"),
							res.getString("ACTION_NAME"), res.getString("OBJECT_NAME"),
							dateTimeFormatter.format(lcdt).toString() };
					tableAudit.addRow(data);

				} while (res.next());
			}
			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("serial")
	private void draw_AuditLog() {
		try {
			Connection conn = new ConnectionControl().createConnection(user.getUserName(), user.getPassword());
			// Lấy tất cả các quyền mà các tài khoản được quyền thực hiện trên các đối tượng
			// bảng
			String sql = "SELECT SESSIONID, DBUSERNAME, ACTION_NAME, SQL_TEXT, OBJECT_SCHEMA, OBJECT_NAME, EVENT_TIMESTAMP\r\n"
					+ "FROM UNIFIED_AUDIT_TRAIL\r\n" + "WHERE OBJECT_SCHEMA = ?";
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, user.getUserName());
			ResultSet res = statement.executeQuery();
			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có quyền nào được cấp trên cột!");
			} else {
				String[] columns = { "STT", "ID", "Tên Người Dùng", "Hoạt Động", "Đối Tượng", "Thời Gian" };
				DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

				tableAudit = new DefaultTableModel(columns, 0) {
					@Override
					public boolean isCellEditable(int row, int column) {
						return false;
					}
				};
				int i = 1;
				do {
					Timestamp ts = res.getTimestamp("EVENT_TIMESTAMP");
					LocalDateTime lcdt = ts.toLocalDateTime();

					String[] data = { String.valueOf(i++), res.getString("SESSIONID"), res.getString("DBUSERNAME"),
							res.getString("ACTION_NAME"), res.getString("OBJECT_NAME"),
							dateTimeFormatter.format(lcdt).toString() };
					tableAudit.addRow(data);

				} while (res.next());
			}
			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
