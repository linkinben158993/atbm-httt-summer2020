package com.atbm.quanlybenhvien.views.Receptionist;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import com.atbm.quanlybenhvien.entity.User;
import com.atbm.quanlybenhvien.util.ConnectionControl;
import com.atbm.quanlybenhvien.views.GenericStuff;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class ReceptionistPatients extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;

	private GenericStuff genericStuff = new GenericStuff();

	private ReceptionistPatients currFrame;

	public ReceptionistPatients getCurrFrame() {
		return currFrame;
	}

	public void setCurrFrame(ReceptionistPatients currFrame) {
		this.currFrame = currFrame;
	}

	private User user;

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	private JTable tbl_Patients;

	public JTable getTbl_Patients() {
		return tbl_Patients;
	}

	public void setTbl_Patients(JTable tbl_Patients) {
		this.tbl_Patients = tbl_Patients;
	}

	private DefaultTableModel tablePatients;

	public DefaultTableModel getTablePatients() {
		return tablePatients;
	}

	public void setTablePatients(DefaultTableModel tablePatients) {
		this.tablePatients = tablePatients;
	}

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ReceptionistPatients frame = new ReceptionistPatients(new User());
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public ReceptionistPatients(final User user) {
		this.user = user;

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1000, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		this.currFrame = (ReceptionistPatients) SwingUtilities.getWindowAncestor(contentPane);

		JScrollPane scrollPane_Patients = new JScrollPane();
		scrollPane_Patients.setBounds(10, 11, 814, 225);
		contentPane.add(scrollPane_Patients);

		draw_TablePatients();
		tbl_Patients = new JTable(tablePatients);
		tbl_Patients.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		genericStuff.resizeTable(tbl_Patients);
		scrollPane_Patients.setViewportView(tbl_Patients);

		JPanel panelBack = new JPanel();
		panelBack.setLayout(null);
		panelBack.setBackground(Color.LIGHT_GRAY);
		panelBack.setBounds(884, 151, 100, 110);
		contentPane.add(panelBack);
		JLabel lblBack = new JLabel("Quay Lại", SwingConstants.CENTER);
		lblBack.setForeground(Color.BLACK);
		lblBack.setFont(new Font("Times New Roman", Font.BOLD, 14));
		lblBack.setBounds(0, 86, 100, 14);
		JLabel lblIconBack = new JLabel();
		lblIconBack.setBounds(10, 11, 80, 80);
		panelBack.add(lblIconBack);
		ImageIcon imageIcon_Back = new ImageIcon(ReceptionistDashBoard.class.getResource("/images/Back.png"));
		Image image_Back = imageIcon_Back.getImage();
		Image newImage_Back = image_Back.getScaledInstance(70, 70, java.awt.Image.SCALE_SMOOTH);
		lblIconBack.setIcon(new ImageIcon(newImage_Back));
		lblIconBack.setBounds(10, 11, 80, 80);
		lblIconBack.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				dispose();
				ReceptionistDashBoard receptionistDashBoard = new ReceptionistDashBoard(user);
				genericStuff.call_frame(receptionistDashBoard);
			}
		});
		genericStuff.hover(lblIconBack, lblBack, panelBack, new Color(230, 230, 250), Color.DARK_GRAY, Color.BLACK,
				Color.LIGHT_GRAY);
		panelBack.add(lblBack);

		JLabel label_13 = new JLabel("2020 Nhóm 23 - Demo Quản Lý Bệnh Viện");
		label_13.setHorizontalAlignment(SwingConstants.CENTER);
		label_13.setFont(new Font("Tahoma", Font.BOLD, 12));
		label_13.setBounds(250, 247, 330, 14);
		contentPane.add(label_13);

		JButton btnAddPatient = new JButton("Thêm Bệnh Nhân");
		btnAddPatient.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ReceptionistAddPatients receptionistAddPatients = new ReceptionistAddPatients(user, currFrame);
				genericStuff.call_dialog(receptionistAddPatients);
			}
		});
		btnAddPatient.setFont(new Font("Times New Roman", Font.PLAIN, 12));
		btnAddPatient.setBounds(834, 11, 140, 23);
		contentPane.add(btnAddPatient);

		JButton btnSaBnhNhn = new JButton("Sửa Bệnh Nhân");
		btnSaBnhNhn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ReceptionistEditPatients receptionistEditPatients = new ReceptionistEditPatients(
						tbl_Patients.getValueAt(tbl_Patients.getSelectedRow(), 1).toString(), user, currFrame);
				genericStuff.call_dialog(receptionistEditPatients);
			}
		});
		btnSaBnhNhn.setFont(new Font("Times New Roman", Font.PLAIN, 12));
		btnSaBnhNhn.setBounds(834, 45, 140, 23);
		contentPane.add(btnSaBnhNhn);

		JButton btnXaBnhNhn = new JButton("Xóa Bệnh Nhân");
		btnXaBnhNhn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

			}
		});
		btnXaBnhNhn.setFont(new Font("Times New Roman", Font.PLAIN, 12));
		btnXaBnhNhn.setBounds(834, 79, 140, 23);
		contentPane.add(btnXaBnhNhn);
	}

	@SuppressWarnings("serial")
	public void draw_TablePatients() {
		try {

			Connection conn = new ConnectionControl().createConnection(this.user.getUserName(),
					this.user.getPassword());
			// VPD đã được áp dụng
			String sql = "SELECT * FROM QLBV.BENHNHAN";
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			ResultSet res = preparedStatement.executeQuery();
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

			if (res.next() == false) {
				JOptionPane.showMessageDialog(null, "Chưa có dữ liệu của bệnh nhân!");

			} else {
				String[] columns = { "STT", "Mã BN", "Họ Tên", "Năm Sinh", "Địa Chỉ", "Điện Thoại", "Triệu Chứng",
						"Thời Gian" };
				tablePatients = new DefaultTableModel(columns, 0) {
					@Override
					public boolean isCellEditable(int row, int column) {
						return false;
					}
				};
				int i = 1;
				do {
					Timestamp ts = Timestamp.valueOf(res.getString("THOIGIAN"));
					LocalDateTime lcdt = ts.toLocalDateTime();

					String[] data = { String.valueOf(i++), res.getString("MABN"), res.getString("HOTEN"),
							res.getString("NAMSINH"), res.getString("DIACHI"), res.getString("DIENTHOAI"),
							res.getString("TRIEUCHUNG"), dateTimeFormatter.format(lcdt).toString() };
					tablePatients.addRow(data);
				} while (res.next());

				conn.close();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
